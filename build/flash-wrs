#!/bin/sh
# A script to ease the use of the usb loader, possibly changing the mac address
#
# Authors: 
#	- Benoit Rat (Seven Solutions, www.sevensols.com)
# 	- Alessandro Rubini
#
# GNU Lesser General Public License Usage
# This file may be used under the terms of the GNU Lesser
# General Public License version 2.1 as published by the Free Software
# Foundation and appearing in the file LICENSE.LGPL included in the
# packaging of this file.  Please review the following information to
# ensure the GNU Lesser General Public License version 2.1 requirements
# will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
#########################################################################	


showhelp()
{
	printf "Usage: $0 [options] [<firmware>.tar.gz] [DEV]\n\n"
	printf "MAC:\t MAC address in hexadecimal seperated by ':' (i.e, AB:CD:EF:01:23:45)\n"
	printf "<firmware>.tar.gz: Use the file in the firmware to flash the device\n"
	printf "DEV:\t The usb device (by default it is /dev/ttyACM0)\n"
	printf "Options: \n"
	printf "  -h|--help\t Show this help message\n"
	printf "  -m|--mode\t can be: default (df and nf), df (dataflash),\n\t\t nf (nandflash), ddr (ddr memories).\n"
	printf "  -e \t\t Completely erase the memory (Can erase your configuration)\n"
	printf "  -b|--build\t Use file that you have build in the WRS_OUTPUT_DIR\n"
	printf "  --test\t Use file for testing the switch (not available)\n"
	printf "  -m1|--mac1\t Default MAC address for the ethernet port on board\n"
	printf "  -m2|--mac2\t Default base MAC address for the switch ports"
	exit 0
}


checkExit()
{
	err=0;
	if [ $1 ]; then
		if [ -f $1 ]; then
			return 0;
		else
			echo "Can't find $1" >& 2;
		fi
	else
		echo "varname not set"
	fi
	exit 1
}

checkMAC()
{
    X="[0-9a-fA-F][0-9a-fA-F]"
    if echo $1 | grep "^${X}:${X}:${X}:${X}:${X}:${X}\$" > /dev/null; then
	return 0
    fi
    return 1
}

modifyMAC()
{
	origin=$1
	new=$2
	cp $origin $new
	
	echo "Configure the MAC addresses:"
	echo "  MAC1 $MAC1"
	echo "  MAC2 $MAC2"
	# MAC address doesn't need any modification
	if [ $silent ]; then 
	    return 1;
	fi
	# Modify MAC address
	sed -i "s/$MAC1_DEF/$MAC1/" $new
	echo "MAC1 is now: $MAC1"
	sed -i "s/$MAC2_DEF/$MAC2/" $new
	echo "MAC2 is now: $MAC2"
	return 0
}

# Go to the top directory
dir=$(dirname $0)/..
WRS_BASE_DIR=$(cd $dir && /bin/pwd)

# Sanity checks
if [ -d ${WRS_BASE_DIR}/usb-loader ]; then true; else
    echo "$0: usb-loader is not found" >& 2
    exit 1
fi

# build flasher itself
if CC=cc make -s -C ${WRS_BASE_DIR}/usb-loader; then true; else
	echo "$0: Error compiling usb-loader" >&2; exit 1;
fi

# parse command line

# Default MAC address for the switch board ethernet
MAC1_DEF="02:34:56:78:9A:BC"
MAC1=$MAC1_DEF
# Default base MAC address for the 18 switch ports
MAC2_DEF="02:34:56:78:9A:00"
MAC2=$MAC2_DEF

DEV=""
FLAGS=""

at91bs="${WRS_BASE_DIR}/binaries/at91bootstrap.bin"
barebox="${WRS_BASE_DIR}/binaries/barebox.bin"
kernel="${WRS_OUTPUT_DIR}/images/zImage"
rootfs="${WRS_OUTPUT_DIR}/images/wrs-image.jffs2.img"

while [ $# -ge 1 ]; do
    case $1 in
	-b|--build) 
		at91bs=${WRS_OUTPUT_DIR}/images/at91bootstrap.bin;
		barebox=${WRS_OUTPUT_DIR}/images/barebox.bin
		kernel=${WRS_OUTPUT_DIR}/images/zImage
		rootfs=${WRS_OUTPUT_DIR}/images/wrs-image.jffs2.img
		rootfscpio=${WRS_OUTPUT_DIR}/images/wrs-image.cpio.gz
		shift;;

	*.tar.gz) 
		checkExit $1
		tar --directory /tmp -xzf $1	
		at91bs=/tmp/at91bootstrap.bin;
		barebox=/tmp/barebox.bin
		kernel=/tmp/zImage
		rootfs=/tmp/wrs-image.jffs2.img
		rootfscpio=${WRS_OUTPUT_DIR}/images/wrs-image.cpio.gz
		shift;;

	-h|--help) 	showhelp; shift;;

	-m|--memmode)
	    # verify memory mode
	    if [ "$2" != "nf" ] && [ "$2" != "df" ] && [ "$2" != "ddr" ] && [ "$2" != "default" ]; then
		echo "Error: Invalid memory mode"
		showhelp
		exit 1
	    fi
	    memmode="$2"
	    shift; shift;;

	/* ) DEV="-s $1"; shift ;;

	-m1|--mac1)
	    MAC1="$2"
	    checkMAC $MAC1
	    if [ $? -eq 1 ];then
		echo "Error: MAC address 1 invalid ($MAC1)"
		exit 1
	    fi
	    shift; shift;;

	-m2|--mac2)
	    MAC2="$2"
	    checkMAC $MAC2
	    if [ $? -eq 1 ];then
		echo "Error: MAC address 2 invalid ($MAC2)"
		exit 1
	    fi
	    shift; shift;;

	-*) FLAGS="${FLAGS} $1"; shift;;

	* ) echo "$0: Invalid argument \"$1\"" >&2; exit 1;;
    esac
done

## MAC1 and MAC2 are really recommended
if [ "x$MAC1" = "x$MAC1_DEF" ]; then
    echo "---------------------------------------"
    echo "WARNING: YOU DID NOT SET THE MAC1 FIELD"
    echo "---------------------------------------"
fi
if [ "x$MAC2" = "x$MAC2_DEF" ]; then
    echo "---------------------------------------"
    echo "WARNING: YOU DID NOT SET THE MAC2 FIELD"
    echo "---------------------------------------"
fi
echo "Starting flashing procedure in 3 seconds ..."
sleep 3

## Selecting the running memmode
if [ "x$memmode" = "xdf" ]; then
	df=1
elif [ "x$memmode" = "xnf" ]; then
	nf=1
elif [ "x$memmode" = "xddr" ]; then
	test=1
else 
	df=1
	nf=1
fi

# Check if atmel sam-ba is find by lusb
msg="Waiting for at91sam SAMBA bootloader on usb\nPlease check that the Dataflash is short-circuited!\n"
while true; do
	lsusb | grep "at91sam" > /dev/null
	if [ "$?" -eq "0" ]; then
		break    
	else
		if [ -n "$msg" ]; then
			printf "$msg"
			msg=""
		fi
		sleep 1
		printf "."
	fi
done
if [ -z "$msg" ]; then
	printf "\tOK\n"
	read -p "Remove the Dataflash jumper (Press any key)" notused
fi

# Create a temporary barebox binary with modified MAC addresses
checkExit $barebox
Tbarebox=$(mktemp /tmp/barebox.XXXXXX)
modifyMAC ${barebox} ${Tbarebox}

## Flashing DataFlash
if [ $df ]; then
	checkExit $at91bs
	${WRS_BASE_DIR}/usb-loader/mch_flasher -m df $FLAGS $DEV ${at91bs} 0 ${Tbarebox} 33792
fi

## Prepare for the NAND flashing procedure
if [ $nf ]; then
	checkExit $kernel
	checkExit $rootfscpio
	TMPFS=$(mktemp -d /tmp/wrsfs.XXXXXX)
	TMPCPIO=$(mktemp /tmp/wrsflash-cpio.XXXXXX.cpio.gz)
	TMPSCRIPT=$(mktemp /tmp/wrsrootfs-script.XXXXXX)


	# The TMPCPIO is used for the NAND flashing procedure. It
	# contains the magic string "paperino" (0x61706570 0x69726f6e)
	# in the first 8bytes and in the following byte the whole
	# file system. Barebox use this magic string to identify
	# the flashing procedure.
	echo -n "paperino" > $TMPCPIO

	cat > $TMPSCRIPT << EOF
cd $TMPFS
zcat $rootfscpio | cpio --extract
mkdir flashing

# Remove heavy and useless stuff to make a light file system to
# load in RAM
rm -rf $TMPFS/etc/init.d/S*
rm -rf $TMPFS/wr
rm -rf $TMPFS/usr/bin
rm -rf $TMPFS/usr/lib
rm -rf $TMPFS/usr/share

cp ${rootfs} $TMPFS/flashing/wrs-image.jffs2.img
cp ${kernel} $TMPFS/flashing/zImage
cp ${WRS_BASE_DIR}/usb-loader/S99flash-from-kernel.sh $TMPFS/etc/init.d/
cd ..
(cd "$TMPFS" && find . | cpio -o -H newc | gzip) >> $TMPCPIO
EOF
	fakeroot bash $TMPSCRIPT
        
	${WRS_BASE_DIR}/usb-loader/mch_flasher -m ddr $FLAGS $DEV ${Tbarebox} 0x0 ${kernel} 0x1000000 ${TMPCPIO} 0x1FFFFF8

	rm -rf $TMPFS
	rm -rf $TMPCPIO
	rm -rf $TMPSCRIPT
fi

## Loading in DDR
if [ $test ]; then
	checkExit $kernel
	checkExit $rootfs
	
	${WRS_BASE_DIR}/usb-loader/mch_flasher -m ddr $FLAGS $DEV ${Tbarebox} 0x0 ${kernel} 0x1000000 ${rootfs} 0x2000000
fi

rm $Tbarebox
echo -e "\n\nDone\n"
