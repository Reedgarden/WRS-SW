#!/bin/sh
# A script to ease the use of the usb loader, possibly changing the mac address
#
# Authors:
#	- Benoit Rat (Seven Solutions, www.sevensols.com)
#	- Federico Vaga
# 	- Alessandro Rubini
#
# GNU Lesser General Public License Usage
# This file may be used under the terms of the GNU Lesser
# General Public License version 2.1 as published by the Free Software
# Foundation and appearing in the file LICENSE.LGPL included in the
# packaging of this file.  Please review the following information to
# ensure the GNU Lesser General Public License version 2.1 requirements
# will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
#########################################################################

#hack: allow some environment variables to change behavior, for developing
if [ "x$WRS_FAKE_FLASHER" = "x" ]; then
    fake=false
else
    fake=true
    echo "Using fake flasher (no action on switch is done)"
    sleep 1
fi

if [ "x$WRS_KEEP_TEMPORARIES" = "x" ]; then
    remove_temps=true
else
    remove_temps=false
fi

fake_flasher()
{
    echo "NOT FLASHING with command:"
    echo "   $*"
    echo ""
    sleep 3
}

showhelp()
{
	printf "Usage: $0 [options] [<firmware>.tar.gz] [DEV]\n\n"
	printf "MAC:\t MAC address in hexadecimal seperated by ':' (i.e, AB:CD:EF:01:23:45)\n"
	printf "<firmware>.tar.gz: Use the file in the firmware to flash the device\n"
	printf "DEV:\t The usb device (by default it is /dev/ttyACM0)\n"
	printf "Options: \n"
	printf "  -h|--help\t Show this help message\n"
	printf "  -m|--mode\t can be: default (df and nf), df (dataflash),\n\t\t nf (nandflash), ddr (ddr memories).\n"
	printf "  -g|--gateware\t Select the gateware: 18p (18 ports, default), 8p (8 ports)\n"
	printf "  -e \t\t Completely erase the memory (Can erase your configuration)\n"
	printf "  -b|--build\t Use files that you have built in the WRS_OUTPUT_DIR\n"
	printf "  -m1|--mac1\t Default MAC address for the ethernet port on board\n"
	printf "  -m2|--mac2\t Default base MAC address for the switch ports\n"
	exit 0
}


checkExit()
{
	# $1 == what, $2 == filename
	# (assumes $me is the script name)
	if [ -f $2 ]; then
		return 0;
	else
		echo "$me: Can't find file \"$2\" ($1)" >& 2;
		exit 1
	fi
}

checkMAC()
{
	X="[0-9a-fA-F][0-9a-fA-F]"
	if echo $1 | grep "^[0-9a-fA-F][02468aceACE]:${X}:${X}:${X}:${X}:${X}\$" > /dev/null; then
		return 0
	fi
	return 1
}

modifyMAC()
{
	origin=$1
	new=$2
	cp $origin $new

	echo "Configure the MAC addresses:"
	echo "  MAC1 $MAC1"
	echo "  MAC2 $MAC2"
	# MAC address doesn't need any modification
	if [ $silent ]; then
	    return 1;
	fi
	# Modify MAC address
	sed -i "s/$MAC1_DEF/$MAC1/" $new
	sed -i "s/$MAC2_DEF/$MAC2/" $new
	return 0
}

# Go to the top directory
dir=$(dirname $0)/..
WRS_BASE_DIR=$(cd $dir && /bin/pwd)

# Sanity checks
if [ -d ${WRS_BASE_DIR}/usb-loader ]; then true; else
    echo "$0: ${WRS_BASE_DIR}/usb-loader: no such directory" >& 2
    exit 1
fi

if [ "x${WRS_OUTPUT_DIR}" = "x" ]; then
    export WRS_OUTPUT_DIR=$(/bin/pwd)
fi

# build flasher itself
FLASHER="${WRS_BASE_DIR}/usb-loader/mch_flasher"
if [ -x $FLASHER ]; then
    true
else
    if CC=cc make -s -C ${WRS_BASE_DIR}/usb-loader; then true; else
	echo "$0: Error compiling in directory ${WRS_BASE_DIR}/usb-loader" >&2;
	exit 1;
    fi
fi

# allow faking operations
if $fake;  then
    FLASHER="fake_flasher $FLASHER"
fi

# Default MAC address for the switch board ethernet
MAC1_DEF="02:34:56:78:9A:BC"
MAC1=$MAC1_DEF
# Default base MAC address for the 18 switch ports
MAC2_DEF="02:34:56:78:9A:00"
MAC2=$MAC2_DEF

# By default we select the gateware only for 18ports because 8ports are
# only used by developper.
gateware="18p*.bin"

DEV=""
FLAGS=""

# full path to the at91boot binary
at91bs=""
# full path to the barebox binary
barebox=""
# full path to the kernel image
kernel=""
# full path to the tar.gz file system
rootfsgz=""
# full path to the cpio image
rootfscpio=""
# full path to the file system directory
TMPFS=""

if [ "x$TMPDIR" = "x" ]; then TMPDIR="/tmp"; fi

WRSTMPDIR=$(mktemp -d $TMPDIR/flash-wrs-XXXXXX)

while [ $# -ge 1 ]; do
	case $1 in
	-b|--build)
		at91bs=${WRS_OUTPUT_DIR}/images/at91bootstrap.bin;
		barebox=${WRS_OUTPUT_DIR}/images/barebox.bin
		kernel=${WRS_OUTPUT_DIR}/images/zImage
		rootfsgz=${WRS_OUTPUT_DIR}/images/wrs-image.tar.gz
		shift;;

	*.tar.gz)
		checkExit "tar-file" $1
		tar --directory $WRSTMPDIR -xzf $1
		at91bs=$WRSTMPDIR/at91bootstrap.bin;
		barebox=$WRSTMPDIR/barebox.bin
		kernel=$WRSTMPDIR/zImage
		rootfsgz=$WRSTMPDIR/wrs-image.tar.gz
		shift;;

	-h|--help) 	showhelp; shift;;

	-m|--memmode)
		# verify memory mode
		if [ "$2" != "nf" ] && [ "$2" != "df" ] && [ "$2" != "ddr" ] && [ "$2" != "default" ]; then
			echo "Error: Invalid memory mode \"$2\""
			showhelp
			exit 1
		fi
		memmode="$2"
		shift; shift;;
		
	-g|--gateware)
		# Obtain which gateware type we want to keep for flash
		if [ "$2" = "18p" ] || [ "$2" = "8p" ]; then
			gateware="$2*.bin";
		else
			echo "Error: Invalid gateware selection \"$2\""
			showhelp
			exit 1
		fi
		shift; shift;;

	/* ) DEV="-s $1"; shift ;;

	-m1|--mac1)
		MAC1="$2"
		checkMAC $MAC1
		if [ $? -eq 1 ];then
			echo "Error: MAC address 1 invalid ($MAC1)"
			exit 1
		fi
		shift; shift;;

	-m2|--mac2)
		MAC2="$2"
		checkMAC $MAC2
		if [ $? -eq 1 ];then
			echo "Error: MAC address 2 invalid ($MAC2)"
			exit 1
		fi
		shift; shift;;

	-[ecs])
		# e == erase, c == check, s == scrub
		FLAGS="${FLAGS} $1"; shift;;

	* ) echo "$0: Invalid argument \"$1\"" >&2; exit 1;;
    esac
done

if [ "x$rootfsgz" = "x" ]; then
    showhelp
fi

# Even if not all files are always needed, check all of them immediately
me=$(basename $0)
echo "${me}: Working in $WRSTMPDIR"
checkExit barebox $barebox
checkExit at91bootstrap $at91bs
checkExit kernel $kernel
checkExit root-filesystem $rootfsgz


## MAC1 and MAC2 are really recommended
if [ "x$MAC1" = "x$MAC1_DEF" ]; then
    echo "Warning: you did not set the MAC1 value; using \"$MAC1_DEF\""
fi
if [ "x$MAC2" = "x$MAC2_DEF" ]; then
    echo "Warning: you did not set the MAC2 value; using \"$MAC2_DEF\""
fi

## Selecting the running memmode
df=false; nf=false, ddr=false
if [ "x$memmode" = "xdf" ]; then
	df=true
elif [ "x$memmode" = "xnf" ]; then
	nf=true
elif [ "x$memmode" = "xddr" ]; then
	ddr=true
else
	df=true
	nf=true
fi

# Check if atmel sam-ba is found by lsusb
if lsusb | grep -q "at91sam" || $fake; then
	true;
else
	echo ""
	echo "$me: Waiting for at91sam SAMBA bootloader on usb."
	echo "    Please check the Managment USB cable is connected "
	echo "    and keep pressed the Flash button while" 
	echo "    resetting/powering the switch."
	while true; do
		if lsusb | grep -q "at91sam"; then
			break
		fi
		sleep 1
		echo -n "."
	done
	echo " Ok"
fi

# Remove the jumper now, before proceeding
if $fake; then
    echo "$me: fake operations, let's continue withouth a WR switch;"
else
    echo "$me: I'm talking with the switch;"
fi
echo -n "   please release the flash button and press Enter to start flashing: "
read unused

# Create a temporary barebox binary with modified MAC addresses
Tbarebox=$WRSTMPDIR/bb.new
modifyMAC ${barebox} ${Tbarebox}


## Flashing DataFlash: at91bootstrap at 0, then barebox at 0x8400 (33792)
if $df; then
	${FLASHER} -m df $FLAGS $DEV ${at91bs} 0 ${Tbarebox} 33792
fi

## Prepare for the NAND flashing procedure
if $nf; then

	TMPFS=$WRSTMPDIR/wrsfs-tgz; mkdir $TMPFS

	# The TMPCPIO is used for the NAND flashing procedure. It
	# contains the magic string "paperino" (0x61706570 0x69726f6e)
	# in the first 8bytes and in the following byte the whole
	# file system. Barebox use this magic string to identify
	# the flashing procedure.
	TMPCPIO=$WRSTMPDIR/wrsflash.cpio.gz

	# make flashing cpio from the unzipped file system
	TMPSCRIPT=$WRSTMPDIR/wrsrootfs-script
	cat > $TMPSCRIPT << EOF
tar --directory $TMPFS -xzf $rootfsgz
# Remove the unnecessary HDL files, by default we keep 18 ports HDL for both FPGA type
# (There is not enough place in DDR to extract 4 HDLs, be carefull if you add custom files)
find $TMPFS/wr/lib/firmware/ -type f \( ! -name ''${gateware}'' \) -a \( ! -name '*rt_cpu.bin' \) -exec rm -f {} \;

# Remove heavy and useless stuff to make a light file system to
# load in RAM
rm -rf $TMPFS/wr

for n in top ltrace gdbserver strace rsync screen php php-cgi gdb; do
   rm -f $TMPFS/usr/bin/\$n
done

for n in python2.7 lighttpd rsyslog; do
   rm -rf $TMPFS/usr/lib/\$n
done
rm -rf $TMPFS/usr/share
rm -rf $TMPFS/var/www

mkdir $TMPFS/flashing/
cp ${kernel} $TMPFS/flashing/zImage
cd ..
echo -n "paperino" > $TMPCPIO
(cd "$TMPFS" && find . | cpio -o -H newc | gzip) >> $TMPCPIO
EOF
	echo -n "Creating filesystem for installation..."
	fakeroot bash $TMPSCRIPT
	echo " Done"

	# Erase all nand memory
	$FLASHER -e -m nand
	# Start nand flashing procedure
	$FLASHER -m ddr $FLAGS $DEV ${Tbarebox} 0x0 ${kernel} 0x1000000 ${TMPCPIO} 0x1FFFFF8

	if $remove_temps; then
	    rm $TMPSCRIPT
	    rm -rf $TMPFS
	    rm -rf $TMPCPIO
	else
	    echo "Keeping temporaries"
	    echo "   script is $TMPSCRIPT"
	    echo "   filesystem image (no attributes) is $TMPFS"
	    echo "   cpio file is in $TMPCPIO at offset 8 bytes"
	fi

	# Now, flashing proceeds by booting a kernel, get its messages

	# Wait for the device to disappear
	while [ -e /dev/ttyACM0 ]; do sleep 0.1; done
	# Wait for the device to appear again
	while [ ! -e /dev/ttyACM0 ]; do sleep 0.1; done
	# Report install messages until the device disappears again
	cat /dev/ttyACM0

fi

## Loading in DDR
if $ddr; then
	echo ""
	echo "DDR loading (the test procedure) is currently not supported"
	echo ""
fi

if $remove_temps; then
    rm $Tbarebox
fi
echo -e "\n\nDone\n"
