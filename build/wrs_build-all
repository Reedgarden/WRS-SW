#!/bin/bash
# This is the main build script. It must build all the environment
# variables for sub-scripts.

# Base dir is forcibly the dirname of this script, as an absolute pathname
dir=$(dirname $0)
if echo $dir | grep -q '^/'; then
    WRS_BASE_DIR="$dir";
else
    WRS_BASE_DIR="$(echo $(/bin/pwd)/$dir | sed 's-/.$--')";
fi
export WRS_BASE_DIR

. ${WRS_BASE_DIR}/scripts/wrs_functions


# See documentation for the meaning of these variables
wrs_setenv_default WRS_OUTPUT_DIR      $(/bin/pwd)
wrs_setenv_default WRS_DOWNLOAD_DIR    ${WRS_OUTPUT_DIR}/downloads

# Refuse to build within the directory itself
if [ "$WRS_OUTPUT_DIR" = "$WRS_BASE_DIR" ]; then
    wrs_die "Please run $(basename $0) from a different directory"
fi

# Check the tools
WRS_TOOLS="curl svn git gcc g++ ar as m4 libtool gettext md5sum make"
WRS_TOOLS="$WRS_TOOLS awk unzip patch bison flex ncursesw5-config"
WRS_TOOLS="$WRS_TOOLS lua fakeroot gettext"

wrs_check_tools $WRS_TOOLS

# Create the directory for the "done" markers, as wrs_build_step needs it
export WRS_DONE_DIR=${WRS_OUTPUT_DIR}/build/_done
if ! [ -d "${WRS_DONE_DIR}" ]; then
    mkdir -p ${WRS_DONE_DIR} || wrs_die "mkdir failed"
fi

export WRS_SCRIPTS_DIR=${WRS_BASE_DIR}/scripts

## Function that show a little help
showhelp() {
	echo ""
	echo "Usage: $0 [options]"
	echo ""
	echo "Building script which fetch and compile the software for the white rabbit switch"
	echo ""
	echo "Options:"
	echo "	--help 		Show this little message"
	echo "	--pack		Create a tar.gz package with the files"
	echo "	--clean		Remove all the previous configuration"
	echo "	--list		List the different building steps"
	echo "	--step=[00-09]	Perform one specific step"
	echo ""
	exit 0;
}

pack()
{
	olddir=$(/bin/pwd)
	cd ${WRS_BASE_DIR}/../
	#Check if the current git repo correspond to a tag
	name=$(git describe --exact-match --tags HEAD &> /dev/null)
	
	if [ $? -ne "0" ]; then
		# Otherwise obtain the date and git revision
		name=$(date +%y%m%d)"-"$(git log --abbrev-commit --pretty=oneline -1 | cut -d" " -f1)
		# Append '+' symbol if some files need to be commited to git 	
		if [ "x$(git status -s .)" != "x" ]; then 
			name="$name+"; 
		fi;	
	fi
	cd ${olddir}
	echo "Packing into wrs-firmware-$name.tar.gz";
	tar -czvf "wrs-firmware-$name.tar.gz" -C ${WRS_OUTPUT_DIR}/images/ at91bootstrap.bin barebox.bin zImage wrs-image.jffs2.img
	exit 0
}

clean()
{
	echo "Cleaning all outputs except downloads"
	rm -Rf ${WRS_OUTPUT_DIR}/build/
	rm -Rf ${WRS_OUTPUT_DIR}/images/
	rm -Rf ${WRS_OUTPUT_DIR}/doc/
	exit 0
}



## Menu to select the function in case we have an argument
if [ -n "$1" ]; then
	case "$1" in
		--help) showhelp;;
		--clean) clean;;
		--list) cd $WRS_DONE_DIR; ls 0*; exit 0;;
		--pack) pack; exit 0;;
		--step=0[0-9]) num=`echo $1 | sed -e 's/--step=//'`; rm -vf $WRS_DONE_DIR/${num}-*;;
		*) showhelp;;
	esac
fi

wrs_show_vars WRS_BASE_DIR WRS_OUTPUT_DIR WRS_DOWNLOAD_DIR \
    WRS_SCRIPTS_DIR WRS_DONE_DIR CROSS_COMPILE

# The function builds one step if needed: if the marker file exists, then the
# step has already been acoomplished and nothing is run this time
wrs_build_step () {
    markerfile="$WRS_DONE_DIR/$1"
    script="$WRS_SCRIPTS_DIR/$2"

    if [ -f $markerfile ]; then
	wrs_echo "Marker $1 exists:"
	wrs_echo "   not running $2"
	return
    fi

    # Run another shell, so we can continue with the next step if it exits
    # I sometimes set WRS_SH_OPTIONS to "-x" to help me in debugging
    bash $WRS_SH_OPTIONS $script
    if [ $? -ne 0 ];
	then failed_step=true;
	else touch $markerfile
    fi
    # remove marker 00, re-checking the download has no issues
    rm -f $WRS_DONE_DIR/00*
}





failed_step=false; # this is set to "true" but the wrs_build_step function

# Now build the stuff one step at a time, only if not already done.

#                 done-marker            script name
wrs_build_step    00-download            wrs_download
wrs_build_step    01-buildroot           wrs_build_buildroot
wrs_default_compiler
wrs_build_step    02-at91boot            wrs_build_at91boot
wrs_build_step    03-barebox             wrs_build_barebox
wrs_build_step    04-kernel              wrs_build_kernel
wrs_build_step    05-modules             wrs_build_modules
wrs_build_step    06-ptp-noposix         wrs_build_ptp_noposix
wrs_build_step    07-wrs-userspace       wrs_build_userspace
wrs_build_step    08-wrs-gateware        wrs_build_gateware
wrs_build_step    09-wrap-rootfs         wrs_build_wraprootfs

if $failed_step; then
    wrs_die "One or more build steps failed"
fi
wrs_echo "Complete build succeeded, apparently"

