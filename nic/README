
This is the NIC driver for white rabbit. It is definitely work in progress.

The source has not been tested (only compile-tested), and has been
laid out to be as understandable as possible, since I'm not the one
who's going to debug it.

These notes are for the ones who will debug my crap. The published one
will be different, hopefully.

* The Makefile

You can "export WRN_DEBUG=y" to force all pr_debug and netdev_dbg
into real printks (with KERN_DEBUG priority: you get them in dmesg
or you need to raise the console priority to see them on the console).

* The naming conventionss

      wrn_   as a prefix is used for all functions and macros, so you
            	immediately know if sth is ours or comes from elsewhere
      (as an exception, names of our own bits and registers are kept
       as I got them, the context should say sth about what they arr)

      wrn    is always a pointer to the wr-nic overall structure
      ep     is the pointer to the endpoint structure
      dev    is the pointer to the network device (device.c is an
             exception, is uses "netdev" instead, sorry for the confution)

* The different files

The module is called wr-nic.ko which comes from several object files.
This is the layout. Files which need to be fixed have FIXME inside and
in this list as well.

     ../wbgen-regs/
        The directory includes the register lists. See the REAME
	in there about how to recreate them.

     nic-hardware.h
        This includes only #defines for magic project-wide constants.
	It then includes the wbgen-generated headers for indivitual
	register blocks.

     wr-nic.h
        the header is used for sharing stuff between sources. Unlike
        the previous one, which it includes, it define kernel-level
	abstractions.

     module.c
        registering and unregistering the module

     device.c
        the actual probe and remove functions, and the driver structure

     endpoint.c
        Talking with the actual endpoints, including the probe part.
	Mii/phy stuff is here, as well as the polling timer for link status.

     nic-core.c
        standard networking stuff: interrupts and so on
	FIXME: open and close must be verified
	FIXME: everything is missing

     ethtool.c
        ethtool operations

     pps.c
        the pulse-per-second mechanism. This might want to be registered
        in Linux using drivers/pps, but it must be looked at. This
        file is currently registering itself as a timesource.
	FIXME: everything

     timestamp.c
        all the stuff related to timestamping
	FIXME: a lot of stuff

     dmtd.c
        calibration and readout
	FIXME: everything
