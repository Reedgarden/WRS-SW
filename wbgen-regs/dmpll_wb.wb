-- -*- Mode: LUA; tab-width: 2 -*-

peripheral
{
	 name = "DMTD phase-shifting PLL";
	 description = "Main linear DMTD PLL controller (DMPLL).";
	 prefix = "DMPLL";

	 hdl_entity = "dmpll_wb_slave";

	 reg {
	    name = "DMPLL Control Register";
	    description = "DMPLL Control register";
	    prefix = "PCR";

	    field {
				 name = "DMPLL Enable";
				 description = "1: DMPLL is enabled \
				 0: DMPLL is disabled";
				 
				 type = BIT;
				 prefix = "ENABLE";
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;	  
	    };

	    field {
				 name = "DMPLL Force Freq mode";
				 type = BIT;
				 prefix = "FORCE_F";
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;	  		  
	    };	 

	    field {
				 name = "DAC serial clock select";
				 description = "Selects the DAC serial clock frequency: \
				 0: f = sysclk / 8 (~ 16 MHz) \
				 1: f = sysclk / 16 (~ 8 MHz) \
				 2: f = sysclk / 32 (~ 4 MHz) \
				 3: f = sysclk / 64 (~ 2 MHz) \
				 4: f = sysclk / 128 (~ 1 MHz) \
				 5: f = sysclk / 256 (~ 500 kHz) \
				 6: f = sysclk / 512 (~ 250 kHz) \
				 7: f = sysclk / 1024 (~ 125 kHz)";
				 
				 prefix = "DAC_CLKSEL";
				 align = 4;
				 type = SLV;
				 size = 3;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY; 
	    };

			field {
				 name = "Reference clock input select";
				 description = "Index of active reference clock input (00 = IN0 ... 11 = IN3)";
				 align = 2;
				 size = 2;
				 type = SLV;
				 prefix = "REFSEL";
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};

			field {
				 name = "Phase shifter speed";
				 description = "Determines how fast the phase shifter works. The phase setpoint is increased or decreased by 1 every 64*PS_SPEED DMTD clock cycles";
				 size = 12;
				 type = SLV;
				 prefix = "PS_SPEED";
			};

	    field {
				 name = "PLL Reset";
				 descritpion = "write 1: causes DMPLL reset\nwrite 0: no effect";
				 type = MONOSTABLE;
				 prefix = "SWRST";
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;	  
				 align=31;
	    };
	 };

	reg {
		 name = "DMPLL Frequency Branch Gain Register";
		 description = "Register containing the PI gain factors for the frequency branch.";

		 prefix = "FBGR";
	   
		 field {
				name = "Proportional gain (Kp)";
				prefix = "F_KP";
				size = 16;
				type = SLV;
				access_bus = READ_WRITE;
				access_dev = READ_ONLY;	 
		 };

		 field {
				name = "Integral gain (Ki)";
				prefix = "F_KI";
				size = 16;
				type = SLV;
				access_bus = READ_WRITE;
				access_dev = READ_ONLY;	 
		 };
	};

	reg {
		 name = "DMPLL Phase Branch Gain Register";
		 prefix = "PBGR";
	   
		 field {
				name = "Proportional gain (Kp)";
				prefix = "P_KP";
				size = 16;
				type = SLV;
				access_bus = READ_WRITE;
				access_dev = READ_ONLY;	 
		 };

		 field {
				name = "Integral gain (Ki)";
				prefix = "P_KI";
				size = 16;
				type = SLV;
				access_bus = READ_WRITE;
				access_dev = READ_ONLY;	 
		 };
	};

	reg {
		 name = "DMPLL Lock Detect Control Register";
		 prefix = "LDCR";

		 field {
				name = "Lock detect threshold";
				prefix = "LD_THR";
				description = "Maximum value of phase error that keeps the DMPLL locked";
				type = SLV;
				size = 12;
				align = 4; 
				access_bus = READ_WRITE;
				access_dev = READ_ONLY;
		 };

		 field {
				name = "Lock detect samples";
				prefix = "LD_SAMP";
				description = "Number of subsequent phase or frequency error samples smaller than LD_THR or frequency error samples in (-1, 1) after which the PLL assumes to be locked.";
				type =SLV;
				size = 12;
				align = 16;
				access_bus = READ_WRITE;
				access_dev = READ_ONLY;
		 };
	};

	reg {
		 name = "DMPLL Status Register";
		 description = "Register containing the current status of the DMPLL";
		 prefix = "PSR";

		 field {
				name = "Frequency lock";
				type = BIT;
				prefix = "FREQ_LK";
				access_bus = READ_ONLY;
				access_dev = WRITE_ONLY;	  
		 };

		 field {
				name = "Phase lock";
				type = BIT;
				prefix = "PHASE_LK";
				access_bus = READ_ONLY;
				access_dev = WRITE_ONLY;	  
		 };

		 field {
				name = "Loss-of-lock indicator";
				description = "read 0: PLL is locked\
				read 1: PLL has lost the lock since the last poll of this bit\
				write 0: no effect\
				write 1: clears the field"
;
				type = BIT;
				prefix = "LOCK_LOST";
				access_bus = READ_WRITE;
				access_dev = READ_WRITE;	  
				load = LOAD_EXT;
		 };
	};


	
	fifo_reg {
	 	 name = "DMPLL Phase/Output record FIFO";
	 	 description = "A FIFO recording the phase/freq error, the DAC output and other PLL parameters for debugging/optimization purposes";
	 	 prefix = "RFIFO";

	 	 direction = CORE_TO_BUS;
	 	 size = 1024;

	 	 flags_bus = {FIFO_EMPTY};
	 	 flags_dev = {FIFO_FULL};


	 	 field {
	 			name = "Freq/phase error";
	 			description = "Current frequency/phase error value";
	 			prefix = "ERR_VAL";
	 			type = SLV;
	 			size = 18;
	 	 };

	 	 field {
	 			name = "Ref tag";
	 			prefix = "TAG_REF";
	 			type = SLV;
	 			size = 18;
	 	 };

	 	 field {
	 			name = "Feedback tag";
	 			prefix = "TAG_FB";
	 			type = SLV;
	 			size = 18;
	 	 };

	 	 field {
	 			name = "Freq/phase mode";
	 			description = "1: frequency mode operation,\n 0: phase mode operation";
	 			prefix = "FP_MODE";
	 			type = BIT;
	 			align = 31;
	 			size = 1;
	 	 };

	 	 field {
	 			name = "DAC output";
	 			description = "Current DAC output value";
	 			prefix = "DAC_VAL";
	 			type = SLV;
	 			size = 16;
	 			align = 16;
	 	 };
	};


};

function gen_dgcr(prefix, clockname)

	 local r =
			reg {
			name = "DMPLL Deglitcher Control Register for "..clockname.." clock";
			description = "Register controlling the deglitcher for "..clockname.." clock DMTD channel";
			prefix = "DGCR_"..prefix;

			field {
				 name = "Low level stable threshold";
				 description = "Stable LOW input state detection threshold. The input to has to remain in LOW state for THR_LO DMTD clock cycles (with no glitches) for the deglitcher to detect a stable LOW state";
				 prefix = "THR_LO";
				 size = 12;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};

			field {
				 name = "High level stable threshold";
				 description = "Stable HIGH input state detection threshold. The input to has to remain in HIGH state for THR_HI DMTD clock cycles (with no glitches) for the deglitcher to detect a stable HIGH state";
				 prefix = "THR_HI";
				 size = 12;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};

			field {
				 name = "Glitch threshold";
				 description = "Number of accummulated glitches after which the deglitcher identifies a rising edge in the input signal";
				 prefix = "THR_GLITCH";
				 size = 8;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_ONLY;
			};
	 };

	 table.insert(periph, r);

end

function gen_pscr(prefix, clockname)
	 local r =
			reg {
			name = "DMPLL Phase Shifter Control Register for "..clockname.." clock";
			description = "Register controlling the phase shift between the feedback clock and "..clockname.." input";
			prefix = "PSCR_"..prefix;

			field {
				 name = "Current Phase Shift";
				 description = "Read: returns the current phase shift with respect to feedback clock (in DMTDCLK clock cycles)\
				 Write: sets the new phase shift value. Cannot be written when PS_BUSY is active (the new value is ignored)";
				 
				 prefix = "PS_VAL";
				 size = 24;
				 type = SLV;
				 access_bus = READ_WRITE;
				 access_dev = READ_WRITE;
				 load = LOAD_EXT;
			};

			field  {
				 name = "Phase Shifter Busy";
				 description = "0: phase shifter for clock "..clockname.."is idle\
				 1: phase shifter is busy";

				 prefix = "BUSY";
				 align=31;
				 type = BIT;
				 access_bus = READ_ONLY;
				 access_dev = WRITE_ONLY;
			};
	 };

	 table.insert(periph, r);
end


gen_dgcr("IN0", "Reference input 0");
gen_dgcr("IN1", "Reference input 1");
gen_dgcr("IN2", "Reference input 2");
gen_dgcr("IN3", "Reference input 3");
gen_dgcr("FB", "TCXO clock");

gen_pscr("IN0", "Reference input 0");
gen_pscr("IN1", "Reference input 1");
gen_pscr("IN2", "Reference input 2");
gen_pscr("IN3", "Reference input 3");

