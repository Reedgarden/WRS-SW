************************************************************************
ieee8021BridgeBasePortTable README
------------------------------------------------------------------------
  This readme file describes the code generated by mib2c (using the MIBs
  for Dummies (MFD) configuration file). The code generated was
  generated specifically for the following SNMP table:

     ieee8021BridgeBasePortTable

  Your code will be called when the snmp agent receives requests for
  the ieee8021BridgeBasePortTable table.  The agent will start by looking for the right
  row in your existing data to operate on, if one exists.


  Configuration Variables
  ------------------------------------------------------------
  Some variables used for code generation may be set to affect the code
  generation. You may override these variables by setting them in the
  file defaults/table-ieee8021BridgeBasePortTable.m2d, and then re-running mib2c.

    m2c_table_settable (currently '1')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    MIB object which have an access of read-write or read-create. The
    default is set based on whether or not the table contains writable
    objects, but can be over-ridden.

    Syntax: @eval $m2c_table_settable = 0@


    m2c_table_dependencies (currently '1')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    checking dependencies between columns, rows or tables. The default
    is set based on whether or not the table contains writable objects,
    but can be over-ridden.

    Syntax: @eval $m2c_table_dependencies = 0@


    m2c_table_row_creation (currently '0')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    checking creation of new rows via SNMP. The default is set based on
    whether or not the table contains read-create objects, but can be
    over-ridden.

    Syntax: @eval $m2c_table_row_creation = 0@


    m2c_context_reg (currently 'netsnmp_data_list')
    --------------------------------------------------------
    This variable contains the structure name to typedef for the
    ieee8021BridgeBasePortTable_registration.

    During initilization, you will provide a pointer to a structure of
    this type. This pointer is used as a parameter to many functions so
    that you have access to your registration data. The default is a
    netsnmp_data_list pointer, which will allow you to keep multiple
    pointers tagged by a text name. If you have a new or existing structure
    you would rather use, you can redefine this variable.
    

    To avoid regenerating code, you may also change this typedef directly
    in the ieee8021BridgeBasePortTable.h header.

    Syntax: @eval $m2c_context_reg = "struct my_registration_context@


    m2c_data_context (currently 'generated')
    --------------------------------------------------------
    This variable contains the structure name to typedef for the
    ieee8021BridgeBasePortTable_data.

    This typedef is used in the row request context structure for the table,
    ieee8021BridgeBasePortTable_rowreq_ctx.

    The typedef in the primary table context will be used for the data and
    undo structure types. This structure should contain all the data
    needed for all the columns in the table. The default is 'generated',
    which will cuase a new data strcuture to be generated with data members
    for each column.

    To avoid regenerating code, you may also change this typedef directly
    in the ieee8021BridgeBasePortTable.h header.

    Syntax: @eval $m2c_data_context = "struct my_data_context"@


    m2c_data_allocate (currently '0')
    --------------------------------------------------------
    This variable determines whether or not the data context (see above)
    requires memory to be allocated. The default generated data structure
    does not. If you are using a custom data context which needs to
    allocate memory, override this value and two additional functions
    will be generated:

      ieee8021BridgeBasePortTable_allocate_data
      ieee8021BridgeBasePortTable_release_data

    Syntax: @eval $m2c_data_allocate = 1@


    m2c_data_init (currently '1')
    --------------------------------------------------------
    This variable determines whether or not the data context (see above)
    or any other items you have added to the table context requires
    initialization. The default generated data structure does not. If you
    are using a custom data context or have added items needing initialization
    to the table context, override this value and two additional functions
    will be generated:

      ieee8021BridgeBasePortTable_rowreq_ctx_init
      ieee8021BridgeBasePortTable_rowreq_ctx_cleanup

    Syntax: @eval 1 = 1@


    m2c_table_access (currently 'container-cached')
    ------------------------------------------------------------------
    This variable determines which data interface will be use to generate
    code for looking up data for a given index. The default is the
    'container-cached' access code, which caches the data in a netsnmp-
    container (usually a sorted array).

    Available options can be determined by checking for mib2c configuration
    files that begin with 'mfd-access-*'.

    Syntax: @eval $m2c_table_access = 'container-cached'@

 
    m2c_include_examples (currently '0')
    ------------------------------------------------------------------
    This variable determines whether or not to generate example code. The
    default is to generate example code.

    Syntax: @eval $m2c_include_examples = 0@


    m2c_data_transient (currently '2')
    ------------------------------------------------------------------
    This variable determines how the generated example code deals with the
    data during data lookup. See the table readme file for details on how
    the current table access method interprets this value. In general,
    a value of 0 indicates persistent data, 1 indicates semi-transient and
    2 indicates transient data.

    Syntax: @eval $m2c_data_transient = 0@


 Index(es) for the ieee8021BridgeBasePortTable table
  ------------------------------------------------------------
  The index(es) for the ieee8021BridgeBasePortTable table are:

     ieee8021BridgeBasePortComponentId:
        Syntax:      IEEE8021PbbComponentIdentifier
        DataType:    UNSIGNED32
        ASN type:    ASN_UNSIGNED
        C-code type: u_long
     ieee8021BridgeBasePort:
        Syntax:      IEEE8021BridgePortNumber
        DataType:    UNSIGNED32
        ASN type:    ASN_UNSIGNED
        C-code type: u_long

  You should know how to set all these values from your data context,
  ieee8021BridgeBasePortTable_data.


************************************************************************
ieee8021BridgeBasePortTable File Overview
------------------------------------------------------------------------
  Several files have been generated to implement the ieee8021BridgeBasePortTable
  table. We'll go through these files, one by one, explaining each and
  letting you know which you need to edit.


File: ieee8021BridgeBasePortTable_data_access.[c|h]
------------------------------------------------------------------------
  The ieee8021BridgeBasePortTable_data_access file contains the interface to your data in
  its raw format.  These functions are used to build the row cache or 
  locate the row (depending on the table access method).

  Set MIB context
  -----------------
  TODO : Set MIB index values
  FUNC : ieee8021BridgeBasePortTable_indexes_set
  WHERE: ieee8021BridgeBasePortTable_data_access.c

  This is a convenience function for setting the index context from
  the native C data. Where necessary, value mapping should be done.

  This function should update the table index values (found in
  tbl_idx) for the given raw data.

  
  container summary
  ------------------------
    The container data access code is for cases when you want to
    store your data in the agent/sub-agent.

    ... to be continued...


  cache summary
  ------------------------
    The container-cached data access code is for cases when you want to
    cache your data in the agent/sub-agent.

    ... to be continued...




File: ieee8021BridgeBasePortTable_enums.h
------------------------------------------------------------------------
  This file contains macros for mapping enumeration values when the
  enumerated values defined by the MIB do not match the values used
  internally.

  Review this file to see if any values need to be updated.


File: ieee8021BridgeBasePortTable_data_get.c
------------------------------------------------------------------------
  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortIfIndex_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortDelayExceededDiscards_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortMtuExceededDiscards_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortCapabilities_get

  Since this column has enumerated BITS, you should update or replace the
  IS_SET_* macros to properly determine whether or not a particular bit
  should be set.

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortTypeCapabilities_get

  Since this column has enumerated BITS, you should update or replace the
  IS_SET_* macros to properly determine whether or not a particular bit
  should be set.

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortType_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortExternal_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortAdminPointToPoint_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortOperPointToPoint_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : ieee8021BridgeBasePortName_get



File: ieee8021BridgeBasePortTable_data_set.c
------------------------------------------------------------------------

  This code was generated based on the following assumptions or settings:

  1) None of the values for this table have DEPENDENCIES on other objects.

  DEPENDENCIES on other objects complicates SET request processing. When
  one or more columns in a table depend on another object (in the same
  table, or in another table), a DEPENDENCY exists. For example, if you
  have a table that determine a color with three columns (red, green and
  blue) that define the percentage of each primary color, the total for
  the three columns must equal 100 percent. So, in addition to checking
  that each colums has a valid value between 0 and 100, the total of
  all three columns must equal 100.

  Set $m2c_table_dependencies = 0 in defaults/table-ieee8021BridgeBasePortTable.m2d
  and regenerate code if this assumption is incorrect.

  2) This table does not support ROW CREATION.

  Supporting ROW CREATION allows new rows to be created via SNMP requests.


  Check dependencies
  ------------------
  TODO : check that all dependencies have been satisfied
  FUNC : ieee8021BridgeBasePortTable_check_dependencies

  This function will be called after all the individual columns have been
  set to their new values. Check for any dependencies between rows or
  tables in this function.


  Undo setup
  ----------
  TODO : save data for undo
  FUNC : ieee8021BridgeBasePortTable_undo_setup

  This function will be called before the individual undo_setup functions are
  called. This is where you should save any undo information which is not
  directly related to a particular column. This function will only be called
  once per row. After this function is called, any column which is being
  set will have its individual node undo_setup function called.



  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : ieee8021BridgeBasePortIfIndex_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : ieee8021BridgeBasePortIfIndex_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : ieee8021BridgeBasePortIfIndex_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : ieee8021BridgeBasePortIfIndex_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : ieee8021BridgeBasePortAdminPointToPoint_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : ieee8021BridgeBasePortAdminPointToPoint_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : ieee8021BridgeBasePortAdminPointToPoint_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : ieee8021BridgeBasePortAdminPointToPoint_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.



  Commit changes
  --------------
  TODO : commit changes
  FUNC : ieee8021BridgeBasePortTable_commit

  After all values have been set, the commit function will be called.





************************************************************************
ieee8021BridgeBasePortTable Reference
------------------------------------------------------------------------

Function flow
----------------------------------------------------
To give you the general idea of how the functions flow works, this
example flow is from a complete table implementation.

NOTE: Depending on your configuration, some of the functions used in the
      examples below  may not have been generated for the
      ieee8021BridgeBasePortTable table.

      Conversely, the examples below may not include some functions that
      were generated for the ieee8021BridgeBasePortTable table.

To watch the flow of the ieee8021BridgeBasePortTable table, use the
following debug tokens:

        snmp_agent
        helper:table:req
        ieee8021BridgeBasePortTable
        verbose:ieee8021BridgeBasePortTable
        internal:ieee8021BridgeBasePortTable

e.g.
        snmpd -f -Le -Dieee8021BridgeBasePortTable,verbose:ieee8021BridgeBasePortTable,internal:ieee8021BridgeBasePortTable


Initialization
--------------------------------
init_xxxTable: called                           xxx.c
   initialize_table_xxxTable                    xxx.c
      _xxxTable_initialize_interface            xxx_interface.c
         xxxTable_init_data                     xxx_data_access.c
      _xxxTable_container_init                  xxx_interface.c
         xxxTable_container_init                xxx_data_access.c


GET Request
--------------------------------
_cache_load                                     xxx_interface.c
   xxxTable_cache_load                          xxx_data_access.c
      xxxTable_allocate_rowreq_ctx              xxx_interface.c
         xxxTable_allocate_data                 xxx_data_get.c
         xxxTable_rowreq_ctx_init               xxx_data_get.c
      xxxTable_indexes_set                      xxx_data_get.c
         xxxTable_indexes_set_tbl_idx           xxx_data_get.c

xxxTable_pre_request                              

_mfd_xxxTable_object_lookup                     xxx_interface.c
   xxxTable_row_prep                            xxx_data_access.c

_mfd_xxxTable_get_values                        xxx_interface.c
   _mfd_xxxTable_get_column                     xxx_interface.c
      yyy_get                                   xxx_data_get.c

xxxTable_post_request


GETNEXT Request
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...
_mfd_xxxTable_get_values                        ...
xxxTable_post_request                           ...


SET Request: success
--------------------------------
_cache_load                                     ...
xxxTable_pre_request
_mfd_xxxTable_object_lookup                     ...

_mfd_xxxTable_check_objects                     xxx_interface.c
   _xxxTable_check_column                       xxx_interface.c
      yyy_check_value                           xxx_data_set.c

_mfd_xxxTable_undo_setup                        xxx_interface.c
   xxxTable_allocate_data                       ...
   xxxTable_undo_setup                          xxx_interface.c
      _xxxTable_undo_setup_column               xxx_interface.c
         yyy_undo_setup                         xxx_data_set.c

_mfd_xxxTable_set_values                        xxx_interface.c
   _xxxTable_set_column                         xxx_interface.c
      yyy_set                                   xxx_data_set.c

_mfd_xxxTable_check_dependencies                xxx_interface.c
   xxxTable_check_dependencies                  xxx_data_set.c

_mfd_xxxTable_commit                            xxx_interface.c
   xxxTable_commit                              xxx_data_set.c

_mfd_xxxTable_undo_cleanup                      xxx_interface.c
   xxxTable_undo_cleanup                        xxx_data_set.c
      xxxTable_release_data                     ...

xxxTable_post_request                           ...


SET Request: row creation
--------------------------------
_cache_load                                     ...
xxxTable_pre_request

_mfd_xxxTable_object_lookup                     ...
   xxxTable_index_from_oid                      xxx_interface.c
   xxxTable_allocate_rowreq_ctx                 ...
      ...
   _xxxTable_check_indexes                      xxx_interface.c
      yyy_check_index                           xxx_data_set.c
      xxxTable_validate_index                   xxx_data_set.c

_mfd_xxxTable_check_objects                     ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...

_mfd_xxxTable_undo_setup                        ...
_mfd_xxxTable_set_values                        ...
_mfd_xxxTable_check_dependencies                ...
_mfd_xxxTable_commit                            ...
_mfd_xxxTable_undo_cleanup                      ...
xxxTable_post_request                           ...


SET Resuest: value error
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...

_mfd_xxxTable_check_objects                     ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...
      ERROR:"yyy value not supported"

xxxTable_post_request                           ...


SET Request: commit failure
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...
_mfd_xxxTable_check_objects                     ...
_mfd_xxxTable_undo_setup                        ...
_mfd_xxxTable_set_values                        ...
_mfd_xxxTable_check_dependencies                ...

_mfd_xxxTable_commit                            ...
   xxxTable_commit                              ...
   ERROR: bad rc -1

_mfd_xxxTable_undo_commit                       xxx_interface.c
   xxxTable_undo_commit                         xxx_data_set.c

_mfd_xxxTable_undo_values                       xxx_interface.c
   _xxxTable_undo_column                        xxx_interface.c
      yyy_undo                                  xxx_data_set.c

_mfd_xxxTable_undo_cleanup                      ...
xxxTable_post_request                           ...


Row release (user initiated)
--------------------------------
xxxTable_release_rowreq_ctx                     xxx_interface.c
   xxxTable_rowreq_ctx_cleanup                  xxx_data_get.c
   xxxTable_release_data                        xxx_data_get.c



Table / column details
----------------------------------------------------
/**********************************************************************
 **********************************************************************
 ***
 *** Table ieee8021BridgeBasePortTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortTable is subid 4 of ieee8021BridgeBase.
 * Its status is Current.
 * OID: .1.3.111.2.802.1.1.2.1.1.4, length: 11
*/

/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortComponentId
 * ieee8021BridgeBasePortComponentId is subid 1 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is NoAccess.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.1
 * Description:
The component identifier is used to distinguish between the
        multiple virtual bridge instances within a PBB.  In simple
        situations where there is only a single component the default
        value is 1.
 *
 * Attributes:
 *   accessible 0     isscalar 0     enums  0      hasdefval 0
 *   readable   0     iscolumn 1     ranges 1      hashint   1
 *   settable   0
 *   hint: d
 *
 * Ranges:  1 - 2147483647;
 *
 * Its syntax is IEEE8021PbbComponentIdentifier (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 *
 *
 *
 * NOTE: NODE ieee8021BridgeBasePortComponentId IS NOT ACCESSIBLE
 *
 *
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePort
 * ieee8021BridgeBasePort is subid 2 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is NoAccess.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.2
 * Description:
The port number of the port for which this entry
        contains bridge management information.
 *
 * Attributes:
 *   accessible 0     isscalar 0     enums  0      hasdefval 0
 *   readable   0     iscolumn 1     ranges 1      hashint   1
 *   settable   0
 *   hint: d
 *
 * Ranges:  1 - 65535;
 *
 * Its syntax is IEEE8021BridgePortNumber (based on perltype UNSIGNED32)
 * The net-snmp type is ASN_UNSIGNED. The C type decl is u_long (u_long)
 *
 *
 *
 * NOTE: NODE ieee8021BridgeBasePort IS NOT ACCESSIBLE
 *
 *
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortIfIndex
 * ieee8021BridgeBasePortIfIndex is subid 3 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.3
 * Description:
The value of the instance of the IfIndex object,
         defined in the IF-MIB, for the interface corresponding
         to this port, or the value 0 if the port has not been
         bound to an underlying frame source and sink.

         It is an implementation specific decision as to whether this object
         may be modified if it has been created or if 0 is a legal value.

         The underlying IfEntry indexed by this column must be persistent
         across reinitializations of the management system.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   1
 *   settable   1
 *   hint: d
 *
 * Ranges:  0 - 2147483647;
 *
 * Its syntax is InterfaceIndexOrZero (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortDelayExceededDiscards
 * ieee8021BridgeBasePortDelayExceededDiscards is subid 4 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.4
 * Description:
The number of frames discarded by this port due
        to excessive transit delay through the bridge.  It
        is incremented by both transparent and source
        route bridges.

        Discontinuities in the value of the counter can occur
        at re-initialization of the management system, and at
        other times as indicated by the value of
        ifCounterDiscontinuityTime object of the associated
        interface (if any).
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortMtuExceededDiscards
 * ieee8021BridgeBasePortMtuExceededDiscards is subid 5 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.5
 * Description:
The number of frames discarded by this port due
        to an excessive size.  It is incremented by both
        transparent and source route bridges.

        Discontinuities in the value of the counter can occur
        at re-initialization of the management system, and at
        other times as indicated by the value of
        ifCounterDiscontinuityTime object of the associated
        interface (if any).
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortCapabilities
 * ieee8021BridgeBasePortCapabilities is subid 6 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.6
 * Description:
Indicates the parts of IEEE 802.1D and 802.1Q that are
        optional on a per-port basis, that are implemented by
        this device, and that are manageable through this MIB.

        dot1qDot1qTagging(0), -- supports 802.1Q VLAN tagging of
                              -- frames and MVRP.
        dot1qConfigurableAcceptableFrameTypes(1),
                              -- allows modified values of
                              -- dot1qPortAcceptableFrameTypes.
        dot1qIngressFiltering(2)
                              -- supports the discarding of any
                              -- frame received on a Port whose
                              -- VLAN classification does not
                              -- include that Port in its Member
                              -- set.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 * Enum range: 3/8. Values:  dot1qDot1qTagging(0), dot1qConfigurableAcceptableFrameTypes(1), dot1qIngressFiltering(2)
 *
 * Its syntax is BITS (based on perltype BITS)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (u_long)
 * This data type requires a length.
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortTypeCapabilities
 * ieee8021BridgeBasePortTypeCapabilities is subid 7 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.7
 * Description:
Indicates the capabilities of this port.  The corresponding
         instance of ieee8021BridgeBasePortType can potentially take
         any of the values for which the corresponding bit in this
         object is 1.  The possible port types are as follows:

             customerVlanPort(0) - Indicates the port can be a C-tag
                 aware port of an enterprise VLAN aware bridge.

             providerNetworkPort(1) - Indicates the port can be an
                 S-tag aware port of a Provider Bridge or Backbone
                 Edge Bridge used for connections within a PBN or
                 PBBN.

             customerNetworkPort(2) - Indicates the port can be an
                 S-tag aware port of a Provider Bridge or Backbone
                 Edge Bridge used for connections to the exterior of
                 a PBN or PBBN.

             customerEdgePort(3) - Indicates the port can be a C-tag
                 aware port of a Provider Bridge used for connections
                 to the exterior of a PBN or PBBN.

             customerBackbonePort(4) - Indicates the port can be a
                 I-tag aware port of a Backbone Edge Bridge's
                 B-component.

             virtualInstancePort(5) - Indicates the port can be a
                 virtual S-tag aware port within a Backbone Edge
                 Bridge's I-component which is responsible for
                 handling S-tagged traffic for a specific backbone
                 service instance.

             dBridgePort(6) - Indicates the port can be a VLAN-unaware
                 member of an 802.1D bridge.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 * Enum range: 5/8. Values:  customerVlanPort(0), providerNetworkPort(1), customerNetworkPort(2), customerEdgePort(3), customerBackbonePort(4), virtualInstancePort(5), dBridgePort(6)
 *
 * Its syntax is BITS (based on perltype BITS)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (u_long)
 * This data type requires a length.
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortType
 * ieee8021BridgeBasePortType is subid 8 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.8
 * Description:
The port type.  This value must be persistent over power up
         restart/reboot.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 * Enum range: 7/16. Values:  none(1), customerVlanPort(2), providerNetworkPort(3), customerNetworkPort(4), customerEdgePort(5), customerBackbonePort(6), virtualInstancePort(7), dBridgePort(8)
 *
 * Its syntax is IEEE8021BridgePortType (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortExternal
 * ieee8021BridgeBasePortExternal is subid 9 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.9
 * Description:
A boolean indicating whether the port is external.  A value of
        true(1) means the port is external.  A value of false(2) means
        the port is internal.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortAdminPointToPoint
 * ieee8021BridgeBasePortAdminPointToPoint is subid 10 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.10
 * Description:
For a port running spanning tree, this object represents the 
         administrative point-to-point status of the LAN segment
         attached to this port, using the enumeration values of
         6.4.3.  A value of forceTrue(1) indicates
         that this port should always be treated as if it is
         connected to a point-to-point link.  A value of
         forceFalse(2) indicates that this port should be treated as
         having a shared media connection.  A value of auto(3)
         indicates that this port is considered to have a
         point-to-point link if it is an Aggregator and all of its
         members are aggregatable, or if the MAC entity
         is configured for full duplex operation, either through
         auto-negotiation or by management means.  Manipulating this
         object changes the underlying adminPointToPointMAC.

         For a VIP, the adminPointToPointMAC parameter controls
         the mechanism by which the Default Backbone Destination
         parameter for the VIP is determined.  For a backbone
         service instance that includes only 2 VIPs, the value
         may be set to forceTrue(1) which permits dynamic learning
         of the Default Backbone Destination parameter.  For a
         backbone service instance that includes more than 2 VIPs,
         the value must be set to ForceFalse(2) or auto(3).

         When this object is set to forceTrue(1) for a VIP, the
         Default Backbone Destination parameter is modified by
         the subsequent M_UNITDATA.indications as specified in
         6.10.1 (and described in 26.4.1).  Whenever the parameter
         is set to ForceFalse(2) or auto(3), the value for the
         Default Backbone Destination parameter is set to the
         Backbone Service Instance Group Address for the VIP-ISID. 

         The value of this object MUST be retained across
         reinitializations of the management system.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 1
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *   defval: forceFalse
 *
 * Enum range: 3/8. Values:  forceTrue(1), forceFalse(2), auto(3)
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortOperPointToPoint
 * ieee8021BridgeBasePortOperPointToPoint is subid 11 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.11
 * Description:
For a port running spanning tree, this object represents
         the operational point-to-point status of the LAN segment
         attached to this port.  It indicates whether a port is
         considered to have a point-to-point connection.
         If adminPointToPointMAC is set to auto(2), then the value
         of operPointToPointMAC is determined in accordance with the
         specific procedures defined for the MAC entity concerned,
         as defined in 6.5 of IEEE 802.1w.  The value is
         determined dynamically; that is, it is re-evaluated whenever
         the value of adminPointToPointMAC changes, and whenever
         the specific procedures defined for the MAC entity evaluate
         a change in its point-to-point status.

         For a VIP, this object simply reflects the value of the
         corresponding instance of ieee8021BridgeBasePortAdminPointToPoint.
         The value will be true(1) if that object is forceTrue(1), and
         the value will be false(2) if the value of that object is either
         forceFalse(2) or auto(3).
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * IEEE8021-BRIDGE-MIB::ieee8021BridgeBasePortEntry.ieee8021BridgeBasePortName
 * ieee8021BridgeBasePortName is subid 12 of ieee8021BridgeBasePortEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.111.2.802.1.1.2.1.1.4.1.12
 * Description:
A text string of up to 32 characters, of locally determined significance.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   1
 *   settable   0
 *   hint: 255t
 *
 * Ranges:  0 - 255;
 *
 * Its syntax is SnmpAdminString (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.  (Max 255)
 */


